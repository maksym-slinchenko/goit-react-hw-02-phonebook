{"version":3,"sources":["components/contacs-form/contact-form.js","components/contact-item/contact-item.js","components/contact-list/contact-list.js","components/filter/filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","preventDefault","currentTarget","value","setState","isFieldEmpty","alert","handleAddContacts","inputName","parentNode","firstElementChild","namesArray","props","contacts","map","c","toLowerCase","includes","i","indexOf","onCreateContacts","reset","type","this","onChange","onClick","Component","ContactItem","id","onRemove","ContactList","uuidv4","Filtre","onChangeFiter","target","App","filter","createContacts","prevState","removeContact","findIndex","splice","changeFilter","getFilterContacts","contact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06c2a429.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  // Изменение свойств\r\n  handleChange = e => {\r\n    e.preventDefault();\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  // проверка пустые поля или нет\r\n  isFieldEmpty = name => {\r\n    if (name === '') {\r\n      alert(`All fields must be completed`);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // Добавление нового контатка в список\r\n  handleAddContacts = e => {\r\n    e.preventDefault();\r\n    if (this.state.name === '' || this.state.number === '') {\r\n      alert(`All fields must be completed`);\r\n      return;\r\n    }\r\n    // this.isFieldEmpty(this.state.name);\r\n    // this.isFieldEmpty(this.state.number);\r\n    const inputName =\r\n      e.currentTarget.parentNode.firstElementChild.firstElementChild.value;\r\n    const namesArray = this.props.contacts.map(c => c.name.toLowerCase());\r\n    if (namesArray.includes(inputName.toLowerCase())) {\r\n      const i = namesArray.indexOf(inputName.toLowerCase());\r\n      alert(`\"${this.props.contacts[i].name}\" is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    this.props.onCreateContacts(this.state.name, this.state.number);\r\n    this.reset();\r\n  };\r\n\r\n  // Обнуление значений формы\r\n  reset = () =>\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form>\r\n          <label>\r\n            Name\r\n            <input\r\n              name=\"name\"\r\n              type=\"text\"\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              name=\"number\"\r\n              type=\"tel\"\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" onClick={this.handleAddContacts}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactItem({ name, number, id, onRemove }) {\r\n  return (\r\n    <>\r\n      <li key={id} name={name} onClick={() => onRemove(name)}>\r\n        {`${name}: ${number}`}\r\n        <button type=\"button\">Delete</button>\r\n      </li>\r\n    </>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport ContactItem from '../contact-item/contact-item';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function ContactList({\r\n  contacts,\r\n  onRemove,\r\n}) {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {contacts.map(i => (\r\n          <ContactItem\r\n            name={i.name}\r\n            number={i.number}\r\n            onRemove={onRemove}\r\n            id={uuidv4()}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Filtre({ value, onChangeFiter }) {\r\n  return (\r\n    <>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          name=\"filter\"\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFiter(e.target.value)}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\n\nimport ContactForm from './components/contacs-form/contact-form';\nimport ContactList from './components/contact-list/contact-list';\nimport Filter from './components/filter/filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      {\n        name: 'Max',\n        number: '55-66-88',\n      },\n      {\n        name: 'Ust',\n        number: '55-66-88',\n      },\n      {\n        name: 'All',\n        number: '55-66-88',\n      },\n    ],\n    filter: '',\n  };\n  // Создания контактов\n  createContacts = (name, number) => {\n    const prevState = this.state.contacts;\n    this.setState({\n      contacts: [\n        ...prevState,\n        {\n          name: name,\n          number: number,\n        },\n      ],\n    });\n  };\n\n  // Удаление контакта\n  removeContact = name => {\n    const { contacts } = this.state;\n    const i = contacts.findIndex(c => c.name === name);\n    contacts.splice(i, 1);\n    this.setState({\n      contacts: contacts,\n    });\n  };\n\n  // Фильтрация по имени\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n  // Возвращение отфильтрованного массива\n  getFilterContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onCreateContacts={this.createContacts}\n          contacts={this.state.contacts}\n        />\n        <h2>Contacts</h2>\n        <Filter value={this.state.filter} onChangeFiter={this.changeFilter} />\n        <ContactList\n          contacts={this.getFilterContacts()}\n          onRemove={this.removeContact}\n        />\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}